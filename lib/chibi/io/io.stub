
(cond-expand
 (string-streams
  (define-c non-null-string (%read-line "fgets")
    ((result (array char arg1)) int (default (current-input-port) input-port)))

  (define-c size_t (%read-string "fread")
    ((result (array char (result arg2))) (value 1 size_t) size_t (default (current-input-port) input-port)))

  (define-c size_t (%read-string! "fread")
    (string (value 1 size_t) size_t (default (current-input-port) input-port)))
  ))

(c-include-verbatim "port.c")

(define-c-const int (seek/set "SEEK_SET"))
(define-c-const int (seek/cur "SEEK_CUR"))
(define-c-const int (seek/end "SEEK_END"))

;; (define-c off_t (file-position "ftell") (port))
;; (define-c off_t (set-file-position! "fseek") (port off_t int))

(define-c sexp (file-position "sexp_tell")
  ((value ctx sexp) (value self sexp) sexp))
(define-c sexp (set-file-position! "sexp_seek")
  ((value ctx sexp) (value self sexp) sexp off_t int))

(define-c boolean (is-a-socket? "sexp_is_a_socket_p") (fileno))

(define-c errno (%send-file "sexp_send_file")
  (fileno fileno off_t (default 0 off_t) (result off_t)))

(define-c sexp (%make-custom-input-port "sexp_make_custom_input_port")
  ((value ctx sexp) (value self sexp) sexp sexp sexp))

(define-c sexp (%make-custom-output-port "sexp_make_custom_output_port")
  ((value ctx sexp) (value self sexp) sexp sexp sexp))

(define-c sexp (%make-custom-binary-input-port "sexp_make_custom_binary_input_port")
  ((value ctx sexp) (value self sexp) sexp sexp sexp))

(define-c sexp (%make-custom-binary-output-port "sexp_make_custom_binary_output_port")
  ((value ctx sexp) (value self sexp) sexp sexp sexp))

(define-c sexp (open-input-bytevector "sexp_open_input_bytevector")
  ((value ctx sexp) (value self sexp) sexp))
(define-c sexp (open-output-bytevector "sexp_open_output_bytevector")
  ((value ctx sexp) (value self sexp)))
(define-c sexp (get-output-bytevector "sexp_get_output_bytevector")
  ((value ctx sexp) (value self sexp) sexp))

(define-c sexp (string-count-chars "sexp_string_count")
  ((value ctx sexp) (value self sexp) sexp sexp sexp (default NULL sexp)))
(define-c sexp (%string->utf8 "sexp_string_to_utf8")
  ((value ctx sexp) (value self sexp) sexp))
(define-c sexp (utf8->string! "sexp_utf8_to_string_x")
  ((value ctx sexp) (value self sexp) sexp))

(define-c sexp (write-u8 "sexp_write_u8")
  ((value ctx sexp) (value self sexp) sexp (default (current-output-port) sexp)))
(define-c sexp (read-u8 "sexp_read_u8")
  ((value ctx sexp) (value self sexp) (default (current-input-port) sexp)))
(define-c sexp (peek-u8 "sexp_peek_u8")
  ((value ctx sexp) (value self sexp) (default (current-input-port) sexp)))

;;> \procedure{(feed-pipe from to close-from close-to)}
;;>
;;> Feeds data between two \italic{pipe-like} ports (\var{from} and
;;> \var{to}) until one of them is going to be blocked.
;;>
;;> The ports are assumed to be non-blocking; i.e., they must be either
;;> 'virtual ports' opened by procedures like \scheme{open-input-string},
;;> or the actual files opened in non-blocking mode.
;;>
;;> \scheme{#t} is returned if \var{from} was exhausted; i.e., the input
;;> pipe was closed and no more data can be transferred between the pipes
;;> at all. \scheme{#f} is returned if either of the pipes is going to be
;;> blocked; i.e., no more data is currently available in \var{from}, or
;;> \var{to} cannot accept any more data at the moment.
;;>
;;> Boolean arguments \var{close-from} and \var{close-to} control whether
;;> the respective ports should be closed when the transfer is complete
;;> (i.e., when \scheme{#t} is returned).

(define-c sexp (feed-pipe "sexp_feed_pipe")
  ((value ctx sexp) (value self exp) sexp sexp sexp sexp))
